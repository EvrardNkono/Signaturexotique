const express = require('express');
const db = require('../../config/db');
const router = express.Router();

// Middleware d'authentification pour r√©cup√©rer l'utilisateur connect√© √† partir du token JWT
const authmiddleware = require('../../middleware/authmiddleware');

// ‚ûï Ajouter un produit au panier
// ‚ûï Ajouter un produit au panier (avec gestion des lots)
router.post('/', authmiddleware, (req, res) => {
  const { productId, quantity, price, clientType } = req.body;
  const user_id = req.user.id;

  console.log('üì• Requ√™te ajout au panier :');
  console.log('‚û°Ô∏è productId:', productId, '| quantity:', quantity, '| price:', price, '| clientType:', clientType, '| user_id:', user_id);

  if (!productId || quantity <= 0 || !clientType || price === undefined) {
    console.log('‚ùå Donn√©es invalides re√ßues.');
    return res.status(400).json({ message: 'Donn√©es invalides : ID produit, quantit√©, type client ou prix manquant.' });
  }

  db.get('SELECT * FROM products WHERE id = ?', [productId], (err, product) => {
    if (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du produit :', err);
      return res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration du produit.' });
    }
    if (!product) {
      console.warn('‚ö†Ô∏è Produit introuvable pour l\'ID:', productId);
      return res.status(404).json({ error: 'Produit non trouv√©.' });
    }

    console.log('üì¶ Produit trouv√© :', product.name);
    console.log('üí∂ Prix client (frontend envoy√©) :', price);
    console.log('üìä Donn√©es du produit -> lotQuantity:', product.lotQuantity, '| lotPrice:', product.lotPrice);
    console.log('üë§ Client Type:', clientType);

    db.get('SELECT * FROM cart WHERE productId = ? AND user_id = ?', [productId, user_id], (err, row) => {
      if (err) {
        console.error('‚ùå Erreur lors de la recherche dans le panier :', err);
        return res.status(500).json({ error: 'Erreur lors de la recherche dans le panier.' });
      }

      if (row) {
        const newQuantity = row.quantity + quantity;
        const newPrice = row.price + price;

        console.log('üîÅ Produit d√©j√† dans le panier. Mise √† jour :');
        console.log('üÜï Nouvelle quantit√©:', newQuantity, '| üÜï Nouveau prix cumul√©:', newPrice);

        db.run(
          'UPDATE cart SET quantity = ?, price = ? WHERE productId = ? AND user_id = ?',
          [newQuantity, newPrice, productId, user_id],
          function (err) {
            if (err) {
              console.error('‚ùå Erreur mise √† jour du panier :', err);
              return res.status(500).json({ error: 'Erreur lors de la mise √† jour du panier.' });
            }
            console.log('‚úÖ Panier mis √† jour avec succ√®s.');
            res.json({
              message: 'Quantit√© et prix mis √† jour.',
              productId,
              quantity: newQuantity,
              price: newPrice
            });
          }
        );
      } else {
        console.log('‚ûï Produit pas encore dans le panier. Insertion...');
        db.run(
          'INSERT INTO cart (productId, quantity, price, clientType, user_id) VALUES (?, ?, ?, ?, ?)',
          [productId, quantity, price, clientType, user_id],
          function (err) {
            if (err) {
              console.error('‚ùå Erreur lors de l\'insertion :', err);
              return res.status(500).json({ error: 'Erreur lors de l\'ajout du produit au panier.' });
            }
            console.log('‚úÖ Produit ajout√© au panier.');
            res.status(201).json({
              message: 'Produit ajout√© au panier.',
              productId,
              quantity,
              price
            });
          }
        );
      }
    });
  });
});






// ‚ûñ Supprimer un produit (via productId)
router.delete('/:productId', authmiddleware, (req, res) => {
  console.log('DELETE /cart/:productId appel√© avec :', req.params.productId);
  const user_id = req.user.id; // R√©cup√©rer l'ID de l'utilisateur √† partir du token JWT
  const { productId } = req.params;
  console.log('[DELETE] Produit √† supprimer :', productId);

  db.get('SELECT * FROM cart WHERE productId = ? AND user_id = ?', [productId, user_id], (err, row) => {
    if (err) return res.status(500).json({ error: 'Erreur lors de la recherche' });

    if (!row) return res.status(404).json({ error: 'Produit non trouv√© dans votre panier' });

    db.run('DELETE FROM cart WHERE productId = ? AND user_id = ?', [productId, user_id], function(err) {
      if (err) return res.status(500).json({ error: 'Erreur lors de la suppression' });

      console.log('[DELETE] Produit supprim√© avec succ√®s :', productId);
      res.json({ message: 'Produit supprim√© du panier' });
    });
  });
});

// üßπ Vider tout le panier
router.delete('/', authmiddleware, (req, res) => {
  const user_id = req.user.id; // R√©cup√©rer l'ID de l'utilisateur √† partir du token JWT
  console.log('[DELETE] Vider panier');

  db.run('DELETE FROM cart WHERE user_id = ?', [user_id], (err) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json({ message: 'Panier vid√©.' });
  });
});

// üì¶ R√©cup√©rer les produits du panier
router.get('/', authmiddleware, (req, res) => {
  const user_id = req.user.id;

  db.all(`
    SELECT cart.id, cart.productId, cart.quantity, cart.price, products.name, products.unitPrice, products.image, products.lotQuantity, products.lotPrice
    FROM cart
    JOIN products ON cart.productId = products.id
    WHERE cart.user_id = ?
  `, [user_id], (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });

    const response = Array.isArray(rows) ? rows : [];

    // NE PAS TOUCHER √Ä item.price ici, il est d√©j√† bon !
    console.log('[GET] Panier r√©cup√©r√© :', response.length, 'produits');
    res.json(response);
  });
});




// üîÑ Modifier la quantit√© via cart.id
router.put('/:cartId', authmiddleware, (req, res) => {
  const user_id = req.user.id; // R√©cup√©rer l'ID de l'utilisateur √† partir du token JWT
  const cartId = req.params.cartId;
  const { quantity } = req.body;

  console.log('[PUT] MAJ quantit√© via cartId:', cartId, 'Nouvelle quantit√©:', quantity);

  if (quantity < 1) {
    return res.status(400).json({ error: 'La quantit√© doit √™tre au moins 1' });
  }

  db.run('UPDATE cart SET quantity = ? WHERE id = ? AND user_id = ?', [quantity, cartId, user_id], function (err) {
    if (err) {
      console.error('[PUT] Erreur lors de la mise √† jour de la quantit√© :', err);
      return res.status(500).json({ error: 'Erreur serveur' });
    }

    console.log('[PUT] Nombre de lignes modifi√©es:', this.changes);

    if (this.changes === 0) {
      console.log('[PUT] Aucune ligne mise √† jour, v√©rifier les identifiants');
      return res.status(404).json({ error: 'Produit non trouv√© dans votre panier' });
    }

    console.log('[PUT] Quantit√© mise √† jour avec succ√®s pour cartId:', cartId);

    // üéÅ Voici la petite magie que ton Front adore
    return res.status(200).json({
      id: Number(cartId),      // Bien s√ªr, on retourne l'ID mis √† jour
      quantity: quantity       // Et la nouvelle quantit√©
    });
  });
});



module.exports = router;
